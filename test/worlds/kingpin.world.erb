<sdf version="1.6">
  <world name="default">
    <include>
      <uri>model://ground_plane</uri>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>
    <physics type="ode">
      <max_step_size>0.001</max_step_size>
      <ode>
        <solver>
          <friction_model>cone_model</friction_model>
        </solver>
      </ode>
    </physics>

    <model name="vehicle">
      <pose>0 0 0.5 0 0 0</pose>
      <link name="chassis">
        <pose>0 0 0.5 0 0 0.0</pose>
        <inertial>
          <mass>100.0</mass>
          <pose>-0.05 0 -0.1 0 0</pose>
          <inertia>
            <ixx>15.0</ixx>
            <iyy>36.33</iyy>
            <izz>45.33</izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <visual name="chassis_visual">
          <geometry>
            <box>
              <size>2.0 0.8 0.6</size>
            </box>
          </geometry>
        </visual>
        <collision name="chassis">
          <geometry>
            <box>
              <size>2.0 0.8 0.6</size>
            </box>
          </geometry>
        </collision>
      </link>
<%

wheel_track = 1.6
wheel_base = 1.5
wheel_x = wheel_track / 2.0
wheel_y_offset = wheel_base / 2.0

axle_to_wheel = 0.22
axle_x_offset = wheel_x
axle_y_offset = wheel_y_offset - axle_to_wheel

steering_socket_x = 0.48
socket_side_x = 0.1
socket_side_x_offset = steering_socket_x + socket_side_x
socket_side_y_offset = 0.075

axle_rod_connector_x = -0.1
axle_rod_connector_y = -0.03

axle_rod_connector_x_offset = axle_x_offset + axle_rod_connector_x
axle_rod_connector_y_offset = axle_y_offset + axle_rod_connector_y

rod_x = axle_rod_connector_x_offset - socket_side_x_offset
rod_y = axle_rod_connector_y_offset - socket_side_y_offset

  wheels = {}
  wheels["front_left"] = {}
  wheels["front_left"][:side] = 1
  wheels["front_left"][:front] = 1
  wheels["front_right"] = {}
  wheels["front_right"][:side] = -1
  wheels["front_right"][:front] = 1
  wheels["rear_left"] = {}
  wheels["rear_left"][:side] = 1
  wheels["rear_left"][:front] = -1
  wheels["rear_right"] = {}
  wheels["rear_right"][:side] = -1
  wheels["rear_right"][:front] = -1

  wheels.keys.each do |k|
    side = wheels[k][:side]
    front = wheels[k][:front]
%>
      <link name="<%= k %>_wheel">
        <pose><%= front * wheel_x %> <%= side * wheel_y_offset %> 0.05 -1.5705 0 0</pose>
        <inertial>
          <mass>11</mass>
          <inertia>
            <ixx>0.413</ixx>
            <iyy>0.413</iyy>
            <izz>0.671</izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <visual name="visual">
          <geometry>
            <cylinder>
              <length>0.3</length>
              <radius>0.35</radius>
            </cylinder>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <cylinder>
              <length>0.3</length>
              <radius>0.35</radius>
            </cylinder>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>1.1</mu>
                <mu2>1.1</mu2>
              </ode>
            </friction>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <kp>1e9</kp>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>

      <link name="<%= k %>_axle">
        <pose><%= front * wheel_x %> <%= side * axle_y_offset %> 0.05 0 0 0</pose>
        <inertial>
          <mass>2</mass>
          <inertia>
            <ixx>0.001666667</ixx>
            <ixy>0.0</ixy>
            <iyy>0.001666667</iyy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
            <izz>0.0025</izz>
          </inertia>
        </inertial>
        <visual name="visual">
          <geometry>
            <cylinder>
              <length>0.05</length>
              <radius>0.05</radius>
            </cylinder>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <cylinder>
              <length>0.05</length>
              <radius>0.05</radius>
            </cylinder>
          </geometry>
        </collision>
      </link>

      <joint name="<%= k %>_kingpin" type="revolute">
        <parent>chassis</parent>
        <child><%= k %>_axle</child>
        <axis>
          <xyz>0 0 1</xyz>
          <limit>
            <lower>-0.62</lower>
            <upper>0.62</upper>
          </limit>
          <dynamics>
            <damping>1</damping>
            <friction>0</friction>
          </dynamics>
        </axis>
        <physics>
          <ode>
            <cfm_damping>1</cfm_damping>
          </ode>
        </physics>
      </joint>

      <joint name="<%= k %>_motor" type="revolute">
        <parent><%= k %>_axle</parent>
        <child><%= k %>_wheel</child>
        <axis>
          <xyz>0 0 1</xyz>
          <dynamics>
            <friction>12</friction>
          </dynamics>
          <limit>
            <effort>755</effort>
            <velocity>6.358</velocity>
          </limit>
        </axis>
      </joint>
<%
  end
%>
<%
steering = {}
steering["front"] = {}
steering["front"]["front_left"] = {}
steering["front"]["front_left"][:side] = 1
steering["front"]["front_left"][:front] = 1
steering["front"]["front_right"] = {}
steering["front"]["front_right"][:side] = -1
steering["front"]["front_right"][:front] = 1
steering["rear"] = {}
steering["rear"]["rear_left"] = {}
steering["rear"]["rear_left"][:side] = 1
steering["rear"]["rear_left"][:front] = -1
steering["rear"]["rear_right"] = {}
steering["rear"]["rear_right"][:side] = -1
steering["rear"]["rear_right"][:front] = -1

steering.keys.each do |s|
  steer = steering[s]
  f = s == "front" ? 1 : -1
%>
      <link name="<%= s %>_steering_triangle">
        <pose><%= f * steering_socket_x %> 0 0.05 0 0 0</pose>
        <inertial>
          <mass>1</mass>
          <inertia>
            <ixx>0.01</ixx>
            <iyy>0.01</iyy>
            <izz>0.02</izz>
            <ixy>0.00</ixy>
            <ixz>0.00</ixz>
            <iyz>0.00</iyz>
          </inertia>
        </inertial>
        <visual name="visual">
          <geometry>
            <cylinder>
              <length>0.1</length>
              <radius>0.1</radius>
            </cylinder>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <cylinder>
              <length>0.1</length>
              <radius>0.1</radius>
            </cylinder>
          </geometry>
        </collision>
      </link>

      <joint name="<%= s %>_steering" type="revolute">
        <parent>chassis</parent>
        <child><%= s %>_steering_triangle</child>
        <axis>
          <xyz>0 0 1</xyz>
          <limit>
            <lower>-1.5</lower>
            <upper>1.5</upper>
            <effort>4000</effort>
            <velocity>1.24</velocity>
          </limit>
          <dynamics>
            <damping>1</damping>
            <friction>2</friction>
          </dynamics>
        </axis>
        <physics>
          <ode>
            <cfm_damping>1</cfm_damping>
          </ode>
        </physics>
      </joint>
<%
  steer.keys.each do |k|
    side = steer[k][:side]
    front = steer[k][:front]
%>
      <link name="<%= k %>_steering_triangle">
        <pose><%= front * socket_side_x_offset %> <%= side * socket_side_y_offset %> 0.05 0 0 0</pose>
        <inertial>
          <mass>1</mass>
          <inertia>
            <ixx>0.01</ixx>
            <iyy>0.01</iyy>
            <izz>0.02</izz>
            <ixy>0.00</ixy>
            <ixz>0.00</ixz>
            <iyz>0.00</iyz>
          </inertia>
        </inertial>
        <visual name="visual">
          <geometry>
            <sphere>
              <radius>0.05</radius>
            </sphere>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <sphere>
              <radius>0.05</radius>
            </sphere>
          </geometry>
        </collision>
      </link>

      <link name="<%= k %>_axle_rod_connector">
        <pose><%= front * axle_rod_connector_x_offset %> <%= side * axle_rod_connector_y_offset %> 0.05 0 0 0</pose>
        <inertial>
          <mass>1</mass>
          <inertia>
            <ixx>0.01</ixx>
            <iyy>0.01</iyy>
            <izz>0.02</izz>
            <ixy>0.00</ixy>
            <ixz>0.00</ixz>
            <iyz>0.00</iyz>
          </inertia>
        </inertial>
        <visual name="visual">
          <geometry>
            <sphere>
              <radius>0.05</radius>
            </sphere>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <sphere>
              <radius>0.05</radius>
            </sphere>
          </geometry>
        </collision>
      </link>

      <joint name="<%= k %>_steering_connector" type="revolute">
        <parent><%= s %>_steering_triangle</parent>
        <child><%= k %>_steering_triangle</child>
        <axis>
          <xyz>0 0 1</xyz>
        </axis>
      </joint>

      <joint name="<%= k %>_steering_rod" type="revolute">
        <parent><%= k %>_steering_triangle</parent>
        <child><%= k %>_axle_rod_connector</child>
        <axis>
          <xyz>0 0 1</xyz>
        </axis>
      </joint>

      <joint name="<%= k %>_axle_connection" type="fixed">
        <parent><%= k %>_axle_rod_connector</parent>
        <child><%= k %>_axle</child>
      </joint>
<%
  end
end
%>
      <plugin name="gazebo_ros_4ws" filename="libgazebo_ros_four_wheel_steering.so">
        <ros>
          <namespace>test</namespace>
        </ros>
        <front_right_wheel_pid_gain>400 0 1</front_right_wheel_pid_gain>
        <front_left_wheel_pid_gain>400 0 1</front_left_wheel_pid_gain>
        <rear_right_wheel_pid_gain>400 0 1</rear_right_wheel_pid_gain>
        <rear_left_wheel_pid_gain>400 0 1</rear_left_wheel_pid_gain>
        <front_steering_pid_gain>2000 0 2</front_steering_pid_gain>
        <rear_steering_pid_gain>2000 0 2</rear_steering_pid_gain>
      </plugin>
    </model>
  </world>
</sdf>